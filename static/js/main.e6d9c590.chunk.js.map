{"version":3,"sources":["component/weather.component.jsx","component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","city","temp_celsius","country","temp_min","temp_max","icon","description","className","min","max","minmaxTemp","Form","props","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","API_key","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","sys","calCel","main","temp","weather","get_WeatherIcon","weatherIcon","id","state","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6d9c590.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Weather = ({\r\n  city,\r\n  country,\r\n  temp_celsius,\r\n  temp_min,\r\n  temp_max,\r\n  icon,\r\n  description\r\n}) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${icon} display-1`}></i>\r\n        </h5>\r\n        {temp_celsius ? <h1 className=\"py-2\">{temp_celsius}&deg;</h1> : null}\r\n        {minmaxTemp(temp_min, temp_max)}\r\n        <h4 className=\"py-3\">{description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nfunction minmaxTemp(min, max) {\r\n  if(min && max){\r\n  return (\r\n    <h3>\r\n      <span className=\"px-4\">{min}&deg;</span>\r\n      <span className=\"px-4\">{max}&deg;</span>\r\n    </h3>\r\n  );\r\n  \r\n}\r\n}\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit ={props.loadWeather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4 offset md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"formControl\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder ='City'\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"formControl\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder ='Country'\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-dark text-light\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nfunction error(){\r\n  return(\r\n    <div className=\"alert alert-danger mx-5\" role='alert'>Please Enter City and Country</div>\r\n  )\r\n}\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./component/weather.component\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./component/form.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nconst API_key = \"47103cb3ea13097b7b312566166837ca\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: \"\",\n      country: \"\",\n      icon: \"\",\n      main: \"\",\n      temp_celsius: \"\",\n      temp_max: \"\",\n      temp_min: \"\",\n      description: \"\",\n      weatherIcon: \"\",\n      error: false\n    };\n   \n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  \n\n  }\n  calCel(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n  get_WeatherIcon(icon, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: icon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: icon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: icon.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: icon.Snow });\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: icon.Atmosphere });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: icon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: icon.Clouds });\n        break;\n      default:\n        this.setState({ icon:icon.Clear});\n    }\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if(city && country){\n      \n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country},uk&appid=${API_key}`\n    );\n    const response = await api_call.json();\n    console.log(response)\n\n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      temp_celsius: this.calCel(response.main.temp),\n      temp_max: this.calCel(response.main.temp_max),\n      temp_min: this.calCel(response.main.temp_min),\n      description: response.weather[0].description,\n    \n    })\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  }\n  else{\n    this.setState({error:true})\n  }\n};\n  render(){\n    const { ...props } = this.state;\n    return (\n      <div className=\"App\">\n        <h1 className='title text-dark'> Weather App </h1>\n        <Form loadWeather={this.getWeather}\n         error={this.state.error}/>\n        <Weather {...props} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}